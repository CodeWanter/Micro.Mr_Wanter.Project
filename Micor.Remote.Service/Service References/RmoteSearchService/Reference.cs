//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Micor.Remote.Service.RmoteSearchService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RmoteSearchService.ISearch")]
    public interface ISearch {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/Analyzer", ReplyAction="http://tempuri.org/ISearch/AnalyzerResponse")]
        string Analyzer(string userName, string passWord, string text, string analyzed, string format);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/Analyzer", ReplyAction="http://tempuri.org/ISearch/AnalyzerResponse")]
        System.Threading.Tasks.Task<string> AnalyzerAsync(string userName, string passWord, string text, string analyzed, string format);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/PartialUpdate", ReplyAction="http://tempuri.org/ISearch/PartialUpdateResponse")]
        bool PartialUpdate(string index, string type, string indexKey, string jsonData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/PartialUpdate", ReplyAction="http://tempuri.org/ISearch/PartialUpdateResponse")]
        System.Threading.Tasks.Task<bool> PartialUpdateAsync(string index, string type, string indexKey, string jsonData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/Count", ReplyAction="http://tempuri.org/ISearch/CountResponse")]
        string Count(string userName, string passWord, string indexName, string queryString, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/Count", ReplyAction="http://tempuri.org/ISearch/CountResponse")]
        System.Threading.Tasks.Task<string> CountAsync(string userName, string passWord, string indexName, string queryString, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/EsSearch", ReplyAction="http://tempuri.org/ISearch/EsSearchResponse")]
        string EsSearch(string userName, string passWord, string indexName, string queryString, string sortField, string fields, int pageNumber, int pagePerNo, string facets, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/EsSearch", ReplyAction="http://tempuri.org/ISearch/EsSearchResponse")]
        System.Threading.Tasks.Task<string> EsSearchAsync(string userName, string passWord, string indexName, string queryString, string sortField, string fields, int pageNumber, int pagePerNo, string facets, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/EsTermSearch", ReplyAction="http://tempuri.org/ISearch/EsTermSearchResponse")]
        string EsTermSearch(string userName, string passWord, string indexName, string queryString, string sortField, string fields, int pageNumber, int pagePerNo, string facets, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/EsTermSearch", ReplyAction="http://tempuri.org/ISearch/EsTermSearchResponse")]
        System.Threading.Tasks.Task<string> EsTermSearchAsync(string userName, string passWord, string indexName, string queryString, string sortField, string fields, int pageNumber, int pagePerNo, string facets, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/FacetsSearch", ReplyAction="http://tempuri.org/ISearch/FacetsSearchResponse")]
        string FacetsSearch(string userName, string passWord, string indexName, string queryString, string facetsFields, int size, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/FacetsSearch", ReplyAction="http://tempuri.org/ISearch/FacetsSearchResponse")]
        System.Threading.Tasks.Task<string> FacetsSearchAsync(string userName, string passWord, string indexName, string queryString, string facetsFields, int size, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetFiveElement", ReplyAction="http://tempuri.org/ISearch/GetFiveElementResponse")]
        string GetFiveElement(string userName, string passWord, string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetFiveElement", ReplyAction="http://tempuri.org/ISearch/GetFiveElementResponse")]
        System.Threading.Tasks.Task<string> GetFiveElementAsync(string userName, string passWord, string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetMoreLikeThis", ReplyAction="http://tempuri.org/ISearch/GetMoreLikeThisResponse")]
        string GetMoreLikeThis(string userName, string passWord, string indexName, string SearchExpression, string field, string format);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetMoreLikeThis", ReplyAction="http://tempuri.org/ISearch/GetMoreLikeThisResponse")]
        System.Threading.Tasks.Task<string> GetMoreLikeThisAsync(string userName, string passWord, string indexName, string SearchExpression, string field, string format);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetPageMoreLikeThis", ReplyAction="http://tempuri.org/ISearch/GetPageMoreLikeThisResponse")]
        string GetPageMoreLikeThis(string userName, string passWord, string indexName, string SearchExpression, string field, int pageNumber, int pagePerNo, string format);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/GetPageMoreLikeThis", ReplyAction="http://tempuri.org/ISearch/GetPageMoreLikeThisResponse")]
        System.Threading.Tasks.Task<string> GetPageMoreLikeThisAsync(string userName, string passWord, string indexName, string SearchExpression, string field, int pageNumber, int pagePerNo, string format);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/IndexMappingGet", ReplyAction="http://tempuri.org/ISearch/IndexMappingGetResponse")]
        string IndexMappingGet(string IndexName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/IndexMappingGet", ReplyAction="http://tempuri.org/ISearch/IndexMappingGetResponse")]
        System.Threading.Tasks.Task<string> IndexMappingGetAsync(string IndexName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/SingleGet", ReplyAction="http://tempuri.org/ISearch/SingleGetResponse")]
        string SingleGet(string userName, string passWord, string indexName, string id, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/SingleGet", ReplyAction="http://tempuri.org/ISearch/SingleGetResponse")]
        System.Threading.Tasks.Task<string> SingleGetAsync(string userName, string passWord, string indexName, string id, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/RecommendWhose", ReplyAction="http://tempuri.org/ISearch/RecommendWhoseResponse")]
        string RecommendWhose(string userName, string password, string queryString, string type, int size, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/RecommendWhose", ReplyAction="http://tempuri.org/ISearch/RecommendWhoseResponse")]
        System.Threading.Tasks.Task<string> RecommendWhoseAsync(string userName, string password, string queryString, string type, int size, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/KnowledgeTrendAnalysis", ReplyAction="http://tempuri.org/ISearch/KnowledgeTrendAnalysisResponse")]
        string KnowledgeTrendAnalysis(string userName, string password, string queryString, int size, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/KnowledgeTrendAnalysis", ReplyAction="http://tempuri.org/ISearch/KnowledgeTrendAnalysisResponse")]
        System.Threading.Tasks.Task<string> KnowledgeTrendAnalysisAsync(string userName, string password, string queryString, int size, string fm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/Delete", ReplyAction="http://tempuri.org/ISearch/DeleteResponse")]
        string Delete(string index, string type, string indexKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISearch/Delete", ReplyAction="http://tempuri.org/ISearch/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(string index, string type, string indexKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISearchChannel : Micor.Remote.Service.RmoteSearchService.ISearch, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchClient : System.ServiceModel.ClientBase<Micor.Remote.Service.RmoteSearchService.ISearch>, Micor.Remote.Service.RmoteSearchService.ISearch {
        
        public SearchClient() {
        }
        
        public SearchClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SearchClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Analyzer(string userName, string passWord, string text, string analyzed, string format) {
            return base.Channel.Analyzer(userName, passWord, text, analyzed, format);
        }
        
        public System.Threading.Tasks.Task<string> AnalyzerAsync(string userName, string passWord, string text, string analyzed, string format) {
            return base.Channel.AnalyzerAsync(userName, passWord, text, analyzed, format);
        }
        
        public bool PartialUpdate(string index, string type, string indexKey, string jsonData) {
            return base.Channel.PartialUpdate(index, type, indexKey, jsonData);
        }
        
        public System.Threading.Tasks.Task<bool> PartialUpdateAsync(string index, string type, string indexKey, string jsonData) {
            return base.Channel.PartialUpdateAsync(index, type, indexKey, jsonData);
        }
        
        public string Count(string userName, string passWord, string indexName, string queryString, string fm) {
            return base.Channel.Count(userName, passWord, indexName, queryString, fm);
        }
        
        public System.Threading.Tasks.Task<string> CountAsync(string userName, string passWord, string indexName, string queryString, string fm) {
            return base.Channel.CountAsync(userName, passWord, indexName, queryString, fm);
        }
        
        public string EsSearch(string userName, string passWord, string indexName, string queryString, string sortField, string fields, int pageNumber, int pagePerNo, string facets, string fm) {
            return base.Channel.EsSearch(userName, passWord, indexName, queryString, sortField, fields, pageNumber, pagePerNo, facets, fm);
        }
        
        public System.Threading.Tasks.Task<string> EsSearchAsync(string userName, string passWord, string indexName, string queryString, string sortField, string fields, int pageNumber, int pagePerNo, string facets, string fm) {
            return base.Channel.EsSearchAsync(userName, passWord, indexName, queryString, sortField, fields, pageNumber, pagePerNo, facets, fm);
        }
        
        public string EsTermSearch(string userName, string passWord, string indexName, string queryString, string sortField, string fields, int pageNumber, int pagePerNo, string facets, string fm) {
            return base.Channel.EsTermSearch(userName, passWord, indexName, queryString, sortField, fields, pageNumber, pagePerNo, facets, fm);
        }
        
        public System.Threading.Tasks.Task<string> EsTermSearchAsync(string userName, string passWord, string indexName, string queryString, string sortField, string fields, int pageNumber, int pagePerNo, string facets, string fm) {
            return base.Channel.EsTermSearchAsync(userName, passWord, indexName, queryString, sortField, fields, pageNumber, pagePerNo, facets, fm);
        }
        
        public string FacetsSearch(string userName, string passWord, string indexName, string queryString, string facetsFields, int size, string fm) {
            return base.Channel.FacetsSearch(userName, passWord, indexName, queryString, facetsFields, size, fm);
        }
        
        public System.Threading.Tasks.Task<string> FacetsSearchAsync(string userName, string passWord, string indexName, string queryString, string facetsFields, int size, string fm) {
            return base.Channel.FacetsSearchAsync(userName, passWord, indexName, queryString, facetsFields, size, fm);
        }
        
        public string GetFiveElement(string userName, string passWord, string keyword) {
            return base.Channel.GetFiveElement(userName, passWord, keyword);
        }
        
        public System.Threading.Tasks.Task<string> GetFiveElementAsync(string userName, string passWord, string keyword) {
            return base.Channel.GetFiveElementAsync(userName, passWord, keyword);
        }
        
        public string GetMoreLikeThis(string userName, string passWord, string indexName, string SearchExpression, string field, string format) {
            return base.Channel.GetMoreLikeThis(userName, passWord, indexName, SearchExpression, field, format);
        }
        
        public System.Threading.Tasks.Task<string> GetMoreLikeThisAsync(string userName, string passWord, string indexName, string SearchExpression, string field, string format) {
            return base.Channel.GetMoreLikeThisAsync(userName, passWord, indexName, SearchExpression, field, format);
        }
        
        public string GetPageMoreLikeThis(string userName, string passWord, string indexName, string SearchExpression, string field, int pageNumber, int pagePerNo, string format) {
            return base.Channel.GetPageMoreLikeThis(userName, passWord, indexName, SearchExpression, field, pageNumber, pagePerNo, format);
        }
        
        public System.Threading.Tasks.Task<string> GetPageMoreLikeThisAsync(string userName, string passWord, string indexName, string SearchExpression, string field, int pageNumber, int pagePerNo, string format) {
            return base.Channel.GetPageMoreLikeThisAsync(userName, passWord, indexName, SearchExpression, field, pageNumber, pagePerNo, format);
        }
        
        public string IndexMappingGet(string IndexName) {
            return base.Channel.IndexMappingGet(IndexName);
        }
        
        public System.Threading.Tasks.Task<string> IndexMappingGetAsync(string IndexName) {
            return base.Channel.IndexMappingGetAsync(IndexName);
        }
        
        public string SingleGet(string userName, string passWord, string indexName, string id, string fm) {
            return base.Channel.SingleGet(userName, passWord, indexName, id, fm);
        }
        
        public System.Threading.Tasks.Task<string> SingleGetAsync(string userName, string passWord, string indexName, string id, string fm) {
            return base.Channel.SingleGetAsync(userName, passWord, indexName, id, fm);
        }
        
        public string RecommendWhose(string userName, string password, string queryString, string type, int size, string fm) {
            return base.Channel.RecommendWhose(userName, password, queryString, type, size, fm);
        }
        
        public System.Threading.Tasks.Task<string> RecommendWhoseAsync(string userName, string password, string queryString, string type, int size, string fm) {
            return base.Channel.RecommendWhoseAsync(userName, password, queryString, type, size, fm);
        }
        
        public string KnowledgeTrendAnalysis(string userName, string password, string queryString, int size, string fm) {
            return base.Channel.KnowledgeTrendAnalysis(userName, password, queryString, size, fm);
        }
        
        public System.Threading.Tasks.Task<string> KnowledgeTrendAnalysisAsync(string userName, string password, string queryString, int size, string fm) {
            return base.Channel.KnowledgeTrendAnalysisAsync(userName, password, queryString, size, fm);
        }
        
        public string Delete(string index, string type, string indexKey) {
            return base.Channel.Delete(index, type, indexKey);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(string index, string type, string indexKey) {
            return base.Channel.DeleteAsync(index, type, indexKey);
        }
    }
}
